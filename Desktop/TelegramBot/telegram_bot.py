from aiogram import Bot, Dispatcher, executor, types
import random

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InputFile

from dbmanager import Manager
from exemple_generator import get_exemple

mp = ["—Ç—ã—Å—è—á–Ω—ã—Ö", "–¥–µ—Å—è—Ç–∏—Ç—ã—Å—è—á–Ω—ã—Ö", "—Å—Ç–æ—Ç—ã—Å—è—á–Ω—ã—Ö"]


class User:
    def __init__(self, id, name, difficult, current_exemple, current_answer):
        self.id = id
        self.name = name

    def get_difficult(self):
        difficult = db.get_user(self.id)[0][2]
        return difficult

    def get_current_exemple(self):
        current_exemple = db.get_user(self.id)[0][3]
        return current_exemple

    def get_current_answer(self):
        current_answer = db.get_user(self.id)[0][4]
        return current_answer

    def set_difficult(self, difficult):
        db.user_set_difficult(self.id, difficult)

    def set_current_exemple(self, exeple):
        db.user_set_exemple(self.id, exeple)

    def set_current_answer(self, answer):
        db.user_set_answer(self.id, answer)

    def send_exemple(self, exemple):
        db.user_set_exemple(self.id, exemple[0])
        db.user_set_answer(self.id, exemple[1])

    def refuse_exemple(self):
        db.user_set_exemple(self.id, None)
        db.user_set_answer(self.id, None)


class Server:
    def add_user(self, id, name):
        db.add_user(id, name)

    def isReg(self, id):
        users = db.get_users()
        for user in users:
            if user[0] == id:
                return True
        return False

    def get_user(self, id):
        return User(*db.get_user(id)[0])


async def create_example(user, message):
    rand = random.randint(1, 3)
    if rand == 1:
        e = list(map(str, get_exemple(user.get_difficult())))
        await message.answer(f"–í–∞—à–∞ –∑–∞–¥–∞—á–∞:\n\n{e[0]}\n–û—Ç–≤–µ—Ç—å –æ–∫—Ä—É–≥–ª–∏—Ç–µ –¥–æ {mp[user.get_difficult() - 1]}")
        user.send_exemple(e)
    elif rand == 2:
        id, ans = random.choice(db.get_image())
        photo = InputFile(f"image/{id}.png")
        await message.answer(f"–í–∞—à–∞ –∑–∞–¥–∞—á–∞:{' ' * 35}Beta\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        await bot.send_photo(chat_id=message.chat.id, photo=photo)
        user.send_exemple(("img_" + str(id), ans))
    elif rand == 3:
        id, ans = random.choice(db.get_text())
        with open(f"text/{id}", encoding="UTF-8") as file:
            text = "\n".join(file.readlines())
        await message.answer(f"–í–∞—à–∞ –∑–∞–¥–∞—á–∞:{' ' * 35}Beta\n\n{text}")
        user.send_exemple(("txt_" + str(id), ans))


def main():
    global db, bot
    bot = Bot(token='1823627902:AAF06zrp3MV7_J0ubZ1NBbxcDzmT9Y4OBc8')
    server = Server()
    dp = Dispatcher(bot)
    db = Manager(r"DB/TelegramBotDB")

    @dp.message_handler()
    async def act(message: types.Message):

        if not server.isReg(message.from_user.id):
            server.add_user(message.from_user.id, message.from_user.username)

        user = server.get_user(message.from_user.id)

        if message.text.split()[0] == '/help':

            await message.answer(f"–í–∞—à–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:\t{user.name}\n\n"
                                 f"/exemple - –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ\n\n"
                                 f"/refuse - –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–¥–∞–Ω–∏—è\n\n"
                                 f"/difficult (–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏) - –≤—ã—Å—Ç–∞–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤\n\n"
                                 f"/difficult_list - —Å–ø–∏—Å–æ–∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π")

        elif message.text.split()[0] == '/exemple':
            if user.get_current_exemple() == "None":
                await create_example(user, message)
            else:
                user.get_current_exemple()
                if str(user.get_current_exemple()).split("_")[0] != "img":
                    await message.answer(
                        f"–í–∞—à–∞ –∑–∞–¥–∞—á–∞:\n\n{user.get_current_exemple()}\n–û—Ç–≤–µ—Ç—å –æ–∫—Ä—É–≥–ª–∏—Ç–µ –¥–æ {mp[user.get_difficult() - 1]}")
                elif user.get_current_exemple().split("_")[0] == "img":
                    photo = InputFile(f"image/{user.get_current_exemple().split('_')[1]}.png")
                    await message.answer(f"–í–∞—à–∞ –∑–∞–¥–∞—á–∞:{' ' * 35}Beta\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                    await bot.send_photo(chat_id=message.chat.id, photo=photo)
                elif user.get_current_exemple().split("_")[0] == "txt":
                    with open(f"text/{user.get_current_exemple().split('_')[0]}", encoding="UTF-8") as file:
                        text = "\n".join(file.readlines())
                        await message.answer(f"–í–∞—à–∞ –∑–∞–¥–∞—á–∞:{' ' * 35}Beta\n\n{text}")
        elif message.text.split()[0] == '/refuse':
            if user.get_current_exemple() != "None":
                await message.answer(f"üî¥ –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–¥–∞–Ω–∏—è\n\n–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –±—ã–ª: {user.get_current_answer()}")
                user.refuse_exemple()
            else:
                await message.answer(f"–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏—è\n\n–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç –Ω–µ–≥–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è")
        elif message.text.split()[0] == '/difficult':
            if user.get_current_exemple() == "None":
                if len(message.text.split()) == 2:
                    if message.text.split()[1] in ["1", "2", "3"]:
                        user.set_difficult(int(message.text.split()[1]))
                        await message.answer(f"–í—ã—Å—Ç–∞–≤–ª–µ–Ω {message.text.split()[1]} —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
                    else:
                        await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
                else:
                    await message.answer(
                        "/difficult {–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏}\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç–µ—Ç—å –∑–¥–µ—Å—å:\n/difficult_list")
            else:
                await message.answer(
                    f"–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n\n–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /refuse")
        elif message.text.split()[0] == '/difficult_list':
            text = """–°–ª–æ–∂–Ω–æ—Å—Ç–∏\n\n1| –õ—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å (+, -, /, *)\n2| –°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (–°—Ç–µ–ø–µ–Ω–∏)\n3| –ù–µ—Ä–µ–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (–ö–æ—Ä–Ω–∏)
            """
            await message.answer(text)
        else:
            if user.get_current_exemple() != "None":
                if str(user.get_current_answer()).replace(",", ".") == message.text:
                    await message.answer(f"üü¢ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n\n–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π")
                    user.refuse_exemple()
                else:
                    await message.answer(f"üîª –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç")

    executor.start_polling(dp, skip_updates=True)


if __name__ == "__main__":
    main()
